What Time is It Here?
=====================

.. articleMetaData::
   :Where: London, UK
   :Date: 2013-06-18 09:33 Europe/London
   :Tags: blog, mongodb, php, openstreetmap
   :Short: whattime

Finding out what time it is, is often as simple as looking a clock. But when
you need to know the time on another place on Earth, you also need to know in
which timezone you are in. Timezones are a bit more complicated than the
UTC-offset, or a timezone abbreviation (such as GMT or EST). In order to
correctly identify a set of Daylight Saving Time rules (and other changes in
UTC-offset) for a specific you need to know it's `Timezone Identifier`_. These
have the form of *Europe/London* or *America/India/Knox* and any decent sysadm
(and hopefully every developer!) will know what the Timezone Identifier for
their specific area is. It becomes more difficult if you need to know the
Timezone Identifier in a unfamiliar location, such as Indiana_ in the US,
where there are eleven different identifiers.

The *`Olson Database`_* stores for each Identifier a region, but it does not
record which geographical area is associated with that region. Eric Muller
provides (ESRI) shape files containing that information through his website:
http://efele.net/maps/tz/world/ . For each Timezone Identifier there are one or
more polygons, where some polygons also have holes in them. In the case of
Italy, that is to exclude `San Marino`_ and `The Vatican`_ for example but
there are a few other examples as well. But we still need to go from a
latitude/longitude pair to a Timezone Identifier.

I already have written about `importing OpenStreetMap data`_ into MongoDB_ and
I am going to use the same script to import the shape files into MongoDB. But
we need to get to ``.osm`` files (which are XML) first. The quickest way I
found to do this is by opening the shape file in JOSM_. As it is a rather big
file, this will take some time. I've just opened it by adding it as an argument
on the command line::

	wget http://efele.net/maps/tz/world/tz_world.zip
	unzip tz_world.zip
	josm world/world.shp

And you get an extract that looks something like this:

.. image:: /images/content/josm-tzshapefile2.png 

JOSM then allows us to save it as an OSM file and subsequently we can import
the OSM file with the MongoDB/OSM import script that I wrote about in
`importing OpenStreetMap data`_::

	php import-data.php /tmp/tz-world.osm timezone

We use the extra argument ``timezone`` here to import it into a different
MongoDB collection.

To find out all the areas that uses the same timezone as what our center point
points at, we could use the follow data queries (as psuedo code):

	#. Find the Timezone Identifier of the area that our current location
	   contains.
	#. Select all areas that have the same Timezone Identifier.

The center point is located in the ``$center`` variable which is a
``GeoJSONPoint`` object. Its class is defined in
https://raw.github.com/derickr/3angle/master/classes.php. My co-worker `Jeremy
Mikola`_ has started on a `GeoJSON library`_ which I might start using instead
of keeping my own (hacky) variant.

var_dump'ing ``$center->getGeoJson()`` renders::

	array(2) {
	  'type' =>
	  string(5) "Point"
	  'coordinates' =>
	  array(2) {
		[0] => double(5.3009033203125)
		[1] => double(53.388242750108)
	  }
	}

Which is a GeoJSON object that MongoDB's `$geoIntersects`_ operator uses. In
this case, we try to find all documents in our collection that intersect with
the center point, or in other words, find all the documents in the collection
where the timezone polygon includes our center point.

The PHP script to do this, looks like:: 

	<?php
	include 'classes.php';

	// defines and setup our center point variable
	define( 'LOC', 'l' );
	$center = new GeoJSON

	// connect and select database 'demo'
	$m = new MongoClient;
	$d = $m->demo;

	// Select timezone collection
	$tzc = $d->selectCollection( 'timezone' );

	// Construct geo query for current centre point.
	$query = array(
		LOC => array(
			'$geoIntersects' => array(
				'$geometry' => $center->getGeoJson(),
			),
		),
	);

	// this finds the first TZID
	$s = $tzc->findOne( $query );

	var_dump( $s );
	?>

It's output (after formatting) is::

	array(4) {
	  '_id' => string(9) "w-1643005"
	  'ty' => int(2)
	  'l' => array(2) {
		'type' => string(7) "Polygon"
		'coordinates' => array(1) {
		  [0] => array(76) {
			...
		  }
		}
	  }
	  'ts' => array(1) {
		[0] => string(21) "TZID=Europe/Amsterdam"
	  }
	}

If we represent that as an image, we'll see:

.. image:: /images/content/tz-terschelling.png

With the Timezone Identifier that we find (``$s['ts']``) we can now find all
the other documents that have the same Timezone Identifier:

.. image:: /images/content/tz-nederland.png
	:align: right

::

	<?php
	include 'classes.php';

	// defines
	define( 'TAGS', 'ts' );

	// connect and select database 'demo' and
	// collection 'timezone'
	$m = new MongoClient;
	$d = $m->demo;
	$tzc = $d->selectCollection( 'timezone' );

	$s = $tzc->find( array(
		TAGS => 'TZID=Europe/Amsterdam'
	) );

	foreach ( $s as $part )
	{
		var_dump( $part );
	}
	?>

With the above two snippets we can now find the timezone, and hence the time,
for the areas that cover land. However, the same timezone is valid inside
`territorial waters`_, which in general extend up to 22km off the coast. The
downloaded shape files however don't cover the territorial waters and we
hence need to find which shape, as contained in our documents in the MongoDB
collection, is closest, but no further than 22km from our "center point". 

.. _`Timezone Identifier`: http://en.wikipedia.org/wiki/Zoneinfo
.. _`Olson Database`: http://en.wikipedia.org/wiki/Zoneinfo
.. _Indiana: http://en.wikipedia.org/wiki/Time_in_Indiana
.. _`San Marino`: http://en.wikipedia.org/wiki/San_marino
.. _`The Vatican`: http://en.wikipedia.org/wiki/Vatican_City
.. _`importing OpenStreetMap data`: /importing-osm-into-mongodb.html
.. _MongoDB: http://mongodb.org
.. _JOSM: http://en.wikipedia.org/wiki/JOSM
.. _`Jeremy Mikola`: http://jmikola.net/
.. _`GeoJSON library`: https://github.com/jmikola/geojson
.. _`$geoIntersects`: http://docs.mongodb.org/manual/reference/operator/geoIntersects/
.. _`territorial waters`: https://en.wikipedia.org/wiki/Territorial_waters
